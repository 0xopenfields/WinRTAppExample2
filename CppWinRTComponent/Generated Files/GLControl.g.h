// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.230706.1

#pragma once
#include "winrt/CppWinRTComponent.h"
#include "winrt/Microsoft.UI.Composition.h"
#include "winrt/Microsoft.UI.Xaml.h"
#include "winrt/Microsoft.UI.Xaml.Controls.h"
namespace winrt::CppWinRTComponent::implementation
{
    template <typename D, typename... I>
    struct WINRT_IMPL_EMPTY_BASES GLControl_base : implements<D, CppWinRTComponent::GLControl, composing, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElementOverrides, I...>,
        impl::require<D, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>,
        impl::base<D, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        winrt::Microsoft::UI::Xaml::Controls::IControlOverridesT<D>, winrt::Microsoft::UI::Xaml::IFrameworkElementOverridesT<D>, winrt::Microsoft::UI::Xaml::IUIElementOverridesT<D>
    {
        using base_type = GLControl_base;
        using class_type = CppWinRTComponent::GLControl;
        using implements_type = typename GLControl_base::implements_type;
        using implements_type::implements_type;
        using composable_base = winrt::Microsoft::UI::Xaml::Controls::Control;
        hstring GetRuntimeClassName() const
        {
            return L"CppWinRTComponent.GLControl";
        }
        GLControl_base()
        {
            impl::call_factory<winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::Controls::IControlFactory>([&](winrt::Microsoft::UI::Xaml::Controls::IControlFactory const& f) { [[maybe_unused]] auto winrt_impl_discarded = f.CreateInstance(*this, this->m_inner); });
        }
    };
}
namespace winrt::CppWinRTComponent::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct WINRT_IMPL_EMPTY_BASES GLControlT : implements<D, winrt::Windows::Foundation::IActivationFactory, I...>
    {
        using instance_type = CppWinRTComponent::GLControl;

        hstring GetRuntimeClassName() const
        {
            return L"CppWinRTComponent.GLControl";
        }
        auto ActivateInstance() const
        {
            return make<T>();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_GLCONTROL_XAML_G_H) || __has_include("GLControl.xaml.g.h")

#include "GLControl.xaml.g.h"

#else

namespace winrt::CppWinRTComponent::implementation
{
    template <typename D, typename... I>
    using GLControlT = GLControl_base<D, I...>;
}

#endif
