// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.230706.1

#pragma once
#ifndef WINRT_CppWinRTComponent_H
#define WINRT_CppWinRTComponent_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.230706.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.230706.1"
#include "winrt/impl/Microsoft.UI.Composition.2.h"
#include "winrt/impl/Microsoft.UI.Xaml.2.h"
#include "winrt/impl/Microsoft.UI.Xaml.Controls.2.h"
#include "winrt/impl/Microsoft.UI.Xaml.Markup.2.h"
#include "winrt/impl/CppWinRTComponent.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_CppWinRTComponent_IGLControl<D>::Init(int64_t hWndParent) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::CppWinRTComponent::IGLControl)->Init(hWndParent));
    }
    template <typename D>
    struct produce<D, winrt::CppWinRTComponent::IGLControl> : produce_base<D, winrt::CppWinRTComponent::IGLControl>
    {
        int32_t __stdcall Init(int64_t hWndParent) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Init(hWndParent);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
WINRT_EXPORT namespace winrt::CppWinRTComponent
{
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::CppWinRTComponent::IGLControl> : winrt::impl::hash_base {};
    template<> struct hash<winrt::CppWinRTComponent::GLControl> : winrt::impl::hash_base {};
    template<> struct hash<winrt::CppWinRTComponent::XamlMetaDataProvider> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
